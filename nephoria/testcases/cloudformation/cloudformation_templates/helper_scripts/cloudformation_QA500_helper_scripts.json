{
    "AWSTemplateFormatVersion": "2010-09-09",

    "Description": "Cloudformation Example: QA-500 - Sample template to test Cloudformation Helper Scripts",

    "Parameters": {

        "KeyName": {
            "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instance",
            "Type": "AWS::EC2::KeyPair::KeyName",
            "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
        },

        "ImageId": {
            "Description": "Ubuntu Image ID (must have cloudformation helper scripts pre-installed)",
            "Type": "String",
            "NoEcho": "False"
        },

        "EndPoint": {
            "Description": "Endpoint URL of Cloudformation (required for Eucalyptus)",
            "Type": "String",
            "ConstraintDescription": "must be an URL to Cloudformation service on Eucalyptus"
        },

        "InstanceType": {
            "Description": "WebServer EC2 instance type",
            "Type": "String",
            "Default": "m1.medium",
            "AllowedValues": ["t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "g2.2xlarge", "g2.8xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "hi1.4xlarge", "hs1.8xlarge", "cr1.8xlarge", "cc2.8xlarge", "cg1.4xlarge"],
            "ConstraintDescription": "must be a valid EC2 instance type."
        },

        "SSHLocation": {
            "Description": " The IP address range that can be used to SSH to the EC2 instances",
            "Type": "String",
            "MinLength": "9",
            "MaxLength": "18",
            "Default": "0.0.0.0/0",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
        }
    },

    "Resources": {

        "DefaultInstanceRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [{
                        "Effect": "Allow",
                        "Principal": {
                            "Service": [
                                "ec2.amazonaws.com"
                            ]
                        },
                        "Action": [
                            "sts:AssumeRole"
                        ]
                    }]
                },
                "Path": "/",
                "Policies": [{
                    "PolicyName": "AllowAllExceptIAM",
                    "PolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement": [{
                            "Effect": "Allow",
                            "NotAction": [
                                "iam:*"
                            ],
                            "Resource": "*"
                        }]
                    }
                }]
            }
        },
        "DefaultInstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [{
                    "Ref": "DefaultInstanceRole"
                }]
            }
        },

        "CfnUser": {
            "Type": "AWS::IAM::User",
            "Properties": {
                "Path": "/",
                "Policies": [{
                    "PolicyName": "root",
                    "PolicyDocument": {
                        "Statement": [{
                            "Effect": "Allow",
                            "Action": "cloudformation:DescribeStackResource",
                            "Resource": "*"
                        }]
                    }
                }]
            }
        },

        "CfnUserKey": {
            "Type": "AWS::IAM::AccessKey",
            "Properties": {
                "UserName": {
                    "Ref": "CfnUser"
                }
            }
        },

        "TestServer": {
            "Type": "AWS::EC2::Instance",
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "config": {

                        "files": {

                            "/etc/cfn/cfn-hup.conf": {
                                "content": {
                                    "Fn::Join": ["", [
                                        "[main]\n",
                                        "stack=", {
                                            "Ref": "AWS::StackName"
                                        }, "\n",
                                        "credential-file=/etc/cfn/cfn-credentials\n",
                                        "interval=1\n",
                                        "region=", {
                                            "Ref": "AWS::Region"
                                        }, "\n"
                                    ]]
                                },
                                "mode": "000400",
                                "owner": "root",
                                "group": "root"
                            },

                            "/etc/cfn/cfn-credentials": {
                                "content": {
                                    "Fn::Join": ["", [
                                        "AWSAccessKeyId=", {
                                            "Ref": "CfnUserKey"
                                        }, "\n",
                                        "AWSSecretKey=", {
                                            "Fn::GetAtt": ["CfnUserKey", "SecretAccessKey"]
                                        }, "\n"
                                    ]]
                                },
                                "mode": "000400",
                                "owner": "root",
                                "group": "root"
                            },

                            "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                                "content": {
                                    "Fn::Join": ["", [
                                        "[cfn-auto-reloader-hook]\n",
                                        "triggers=post.update\n",
                                        "path=Resources.TestServer.Metadata.AWS::CloudFormation::Init\n",
                                        "action=/usr/local/bin/cfn-init -v -s ", {
                                            "Ref": "AWS::StackId"
                                        }, " -r TestServer ",
                                        " --role ", {
                                            "Ref": "DefaultInstanceRole"
                                        },
                                        " --region ", {
                                            "Ref": "AWS::Region"
                                        },
                                        " --url ", {
                                            "Ref": "EndPoint"
                                        }, "\n",
                                        "runas=root\n"
                                    ]]
                                }
                            }

                        }

                    }
                }
            },
            "Properties": {
                "ImageId": {
                    "Ref": "ImageId"
                },
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "KeyName": {
                    "Ref": "KeyName"
                },
                "IamInstanceProfile": {
                    "Ref": "DefaultInstanceProfile"
                },
                "SecurityGroups": [{
                    "Ref": "TestServerSecurityGroup"
                }],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": ["", [
                            "#!/bin/bash -xe\n",
                            "apt-get update\n",
                            "apt-get install ntp -y\n",
                            "ntpd -u pool.ntp.org\n",
                            "timedatectl set-ntp yes\n",
                            "hwclock --systohc\n",
                            "function error_exit\n",
                            "{\n",
                            " /usr/local/bin/cfn-signal -e 1 ",
                            "    --stack ", {
                                "Ref": "AWS::StackId"
                            },
                            "    --reason \"$1\" '", {
                                "Ref": "WaitHandle"
                            }, "'",
                            "    --role ", {
                                "Ref": "DefaultInstanceRole"
                            },
                            "    --region ", {
                                "Ref": "AWS::Region"
                            }, "\n",
                            "  exit 1\n",
                            "}\n",

                            "/usr/local/bin/cfn-init -v -s ", {
                                "Ref": "AWS::StackId"
                            }, " -r TestServer ",
                            "    --role ", {
                                "Ref": "DefaultInstanceRole"
                            },
                            "    --region ", {
                                "Ref": "AWS::Region"
                            }, " --url ", {
                                "Ref": "EndPoint"
                            }, " || error_exit 'Failed to run cfn-init'\n",

                            "/usr/local/bin/cfn-get-metadata -v -s ", {
                                "Ref": "AWS::StackId"
                            }, " -r TestServer ",
                            "  --access-key ", {
                                "Ref": "CfnUserKey"
                            },
                            "  --secret-key ", {
                                "Fn::GetAtt": ["CfnUserKey", "SecretAccessKey"]
                            },
                            "    --region ", {
                                "Ref": "AWS::Region"
                            }, " --url ", {
                                "Ref": "EndPoint"
                            }, " || error_exit 'Failed to run cfn-init'\n",

                            "/usr/local/bin/cfn-hup || error_exit 'Failed to start cfn-hup'\n",

                            " /usr/local/bin/cfn-signal -e 0 ",
                            "    --stack ", {
                                "Ref": "AWS::StackId"
                            },
                            "    --reason \"Helper Scripts Test Complete\" '", {
                                "Ref": "WaitHandle"
                            }, "'",
                            "    --role ", {
                                "Ref": "DefaultInstanceRole"
                            },
                            "    --region ", {
                                "Ref": "AWS::Region"
                            }, "\n"
                        ]]
                    }
                }
            }
        },

        "WaitHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle"
        },

        "WaitCondition": {
            "Type": "AWS::CloudFormation::WaitCondition",
            "DependsOn": "TestServer",
            "Properties": {
                "Handle": {
                    "Ref": "WaitHandle"
                },
                "Timeout": "300"
            }
        },
        "TestServerSecurityGroup": {
           "Type": "AWS::EC2::SecurityGroup",
           "Properties": {
           "GroupDescription": "Enable SSH access",
                                "SecurityGroupIngress": [{
                                        "IpProtocol": "tcp",
                                        "FromPort": "22",
                                        "ToPort": "22",
                                        "CidrIp": {
                                                "Ref": "SSHLocation"
                                        }
                                }]
           }
       }
       
    },

    "Outputs": {
        "Hostname": {
            "Value": {
                "Fn::GetAtt": ["TestServer", "PublicDnsName"]
            },
            "Description": "Host name for new test server"
        }
    }
}
